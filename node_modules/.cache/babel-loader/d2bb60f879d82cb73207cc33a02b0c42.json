{"ast":null,"code":"var _jsxFileName = \"/Users/fukushimanaoki/Documents/React-ts/src/components/Row.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //import YouTube from \"react-youtube\";\n\nimport axios from \"../axios\";\nimport \"./Row.scss\"; // import movieTrailer from \"movie-trailer\";\n// const movieTrailer = require(\"movie-trailer\");\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original\";\nexport const Row = _ref => {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\"); //urlが更新される度に\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"640\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n\n  const handleClick = async movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      var _trailerurl$data$resu;\n\n      let trailerurl = await axios.get(`/movie/${movie.id}/videos?api_key=XXX`);\n      setTrailerUrl((_trailerurl$data$resu = trailerurl.data.results[0]) === null || _trailerurl$data$resu === void 0 ? void 0 : _trailerurl$data$resu.key);\n    } //   movieTrailer(movie?.name || movie?.title || movie?.original_name || \"\")\n    //     .then((url: string) => {\n    //       const urlParams = new URLSearchParams(new URL(url).search);\n    //       setTrailerUrl(urlParams.get(\"v\"));\n    //     })\n    //     .catch((error: any) => console.log(error.message));\n    // }\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Row-posters\",\n      children: movies.map((movie, i) => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `Row-poster ${isLargeRow && \"Row-poster-large\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name,\n        onClick: () => handleClick(movie)\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","axios","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","trailerurl","id","key","map","i","poster_path","backdrop_path","name"],"sources":["/Users/fukushimanaoki/Documents/React-ts/src/components/Row.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n//import YouTube from \"react-youtube\";\nimport axios from \"../axios\";\nimport \"./Row.scss\";\n// import movieTrailer from \"movie-trailer\";\n// const movieTrailer = require(\"movie-trailer\");\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\ntype Props = {\n  title: string;\n  fetchUrl: string;\n  isLargeRow?: boolean;\n};\n\ntype Movie = {\n  id: string;\n  name: string;\n  title: string;\n  original_name: string;\n  poster_path: string;\n  backdrop_path: string;\n};\n\n//trailerのoption\ntype Options = {\n  height: string;\n  width: string;\n  playerVars: {\n    autoplay: 0 | 1 | undefined;\n  };\n};\n\nexport const Row = ({ title, fetchUrl, isLargeRow }: Props) => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [trailerUrl, setTrailerUrl] = useState<string | null>(\"\");\n\n  //urlが更新される度に\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts: Options = {\n    height: \"390\",\n    width: \"640\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = async (movie: Movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      let trailerurl = await axios.get(`/movie/${movie.id}/videos?api_key=XXX`);\n      setTrailerUrl(trailerurl.data.results[0]?.key);\n    }\n    //   movieTrailer(movie?.name || movie?.title || movie?.original_name || \"\")\n    //     .then((url: string) => {\n    //       const urlParams = new URLSearchParams(new URL(url).search);\n    //       setTrailerUrl(urlParams.get(\"v\"));\n    //     })\n    //     .catch((error: any) => console.log(error.message));\n    // }\n  };\n\n  return (\n    <div className=\"Row\">\n      <h2>{title}</h2>\n      <div className=\"Row-posters\">\n        {/* ポスターコンテンツ */}\n        {movies.map((movie, i) => (\n          <img\n            key={movie.id}\n            className={`Row-poster ${isLargeRow && \"Row-poster-large\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n            onClick={() => handleClick(movie)}\n          />\n        ))}\n      </div>\n      {/* {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />} */}\n    </div>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,YAAP,C,CACA;AACA;;;AAEA,MAAMC,QAAQ,GAAG,qCAAjB;AA0BA,OAAO,MAAMC,GAAG,GAAG,QAA4C;EAAA;;EAAA,IAA3C;IAAEC,KAAF;IAASC,QAAT;IAAmBC;EAAnB,CAA2C;EAC7D,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAU,EAAV,CAApC;EACA,MAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAgB,EAAhB,CAA5C,CAF6D,CAI7D;;EACAC,SAAS,CAAC,MAAM;IACd,eAAeW,SAAf,GAA2B;MACzB,MAAMC,OAAO,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAUR,QAAV,CAAtB;MACAG,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;MACA,OAAOH,OAAP;IACD;;IACDD,SAAS;EACV,CAPQ,EAON,CAACN,QAAD,CAPM,CAAT;EASA,MAAMW,IAAa,GAAG;IACpBC,MAAM,EAAE,KADY;IAEpBC,KAAK,EAAE,KAFa;IAGpBC,UAAU,EAAE;MACV;MACAC,QAAQ,EAAE;IAFA;EAHQ,CAAtB;;EASA,MAAMC,WAAW,GAAG,MAAOC,KAAP,IAAwB;IAC1C,IAAIb,UAAJ,EAAgB;MACdC,aAAa,CAAC,EAAD,CAAb;IACD,CAFD,MAEO;MAAA;;MACL,IAAIa,UAAU,GAAG,MAAMtB,KAAK,CAACY,GAAN,CAAW,UAASS,KAAK,CAACE,EAAG,qBAA7B,CAAvB;MACAd,aAAa,0BAACa,UAAU,CAACT,IAAX,CAAgBC,OAAhB,CAAwB,CAAxB,CAAD,0DAAC,sBAA4BU,GAA7B,CAAb;IACD,CANyC,CAO1C;IACA;IACA;IACA;IACA;IACA;IACA;;EACD,CAdD;;EAgBA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE;MAAA,UAAKrB;IAAL;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAK,SAAS,EAAC,aAAf;MAAA,UAEGG,MAAM,CAACmB,GAAP,CAAW,CAACJ,KAAD,EAAQK,CAAR,kBACV;QAEE,SAAS,EAAG,cAAarB,UAAU,IAAI,kBAAmB,EAF5D;QAGE,GAAG,EAAG,GAAEJ,QAAS,GACfI,UAAU,GAAGgB,KAAK,CAACM,WAAT,GAAuBN,KAAK,CAACO,aACxC,EALH;QAME,GAAG,EAAEP,KAAK,CAACQ,IANb;QAOE,OAAO,EAAE,MAAMT,WAAW,CAACC,KAAD;MAP5B,GACOA,KAAK,CAACE,EADb;QAAA;QAAA;QAAA;MAAA,QADD;IAFH;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAoBD,CA3DM;;GAAMrB,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}